openapi: 3.0.0
info:
  title: User API Documentation
  version: 1.0.0
  description: API for user authentication and management
servers:
  - url: http://localhost:6061
schemes:
  - https
  - http

# Authentication APIs
paths:
  /auth/register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUser'
      responses:
        '201':
          description: User registered successfully
        '400':
          description: Bad request

  /auth/login:
    post:
      summary: Login a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginUser'
      responses:
        '200':
          description: User logged in successfully
        '401':
          description: Unauthorized

  /auth/change-password:
    post:
      summary: Change user password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePassword'
      responses:
        '200':
          description: Password changed successfully
        '400':
          description: Bad request
        '401':
          description: Unauthorized

  /auth/logout:
    post:
      summary: Logout a user
      responses:
        '200':
          description: User logged out successfully

  # CRUD APIs
  /user:
    get:
      summary: Get all users
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'

  /user/{id}:
    get:
      summary: Get a user by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
    put:
      summary: Update a user by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUser'
      responses:
        '200':
          description: User updated successfully
        '400':
          description: Bad request
        '404':
          description: User not found
    delete:
      summary: Delete a user by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User deleted successfully
        '404':
          description: User not found

components:
  schemas:
    # User schema
    User:
      type: object
      properties:
        _id:
          type: string
        fullname:
          type: string
        email:
          type: string
        password:
          type: string
        avatarUrl:
          type: string
        role:
          type: string
          enum:
            - customer
            - admin
            - supervisor
        refreshToken:
          type: string
        phone:
          type: string
        nationCode:
          type: string
        address:
          type: string
        city:
          type: string
        country:
          type: string
        state:
          type: string

    # RegisterUser schema
    RegisterUser:
      type: object
      properties:
        fullname:
          type: string
        email:
          type: string
        password:
          type: string

    # LoginUser schema
    LoginUser:
      type: object
      properties:
        email:
          type: string
        password:
          type: string

    # ChangePassword schema
    ChangePassword:
      type: object
      properties:
        oldPassword:
          type: string
        newPassword:
          type: string

    # UpdateUser schema
    UpdateUser:
      type: object
      properties:
        fullname:
          type: string
        email:
          type: string
        avatarUrl:
          type: string
        role:
          type: string
          enum:
            - customer
            - admin
            - supervisor
        phone:
          type: string
        nationCode:
          type: string
        address:
          type: string
        city:
          type: string
        country:
          type: string
        state:
          type: string
